#!/usr/bin/env python3
import os
import sys
import json
import getopt

HOME = os.getenv('HOME')
CONFIG_FOLDER='{HOME}/.config/powerduck'.format(HOME=HOME)
ACTIVE_PROFILES='{CONFIG_FOLDER}/activeProfiles.json'.format(CONFIG_FOLDER=CONFIG_FOLDER)
POWERDUCK_CONFIG='{CONFIG_FOLDER}/powerduck.json'.format(CONFIG_FOLDER=CONFIG_FOLDER)
LOGFILE='{CONFIG_FOLDER}/log'.format(CONFIG_FOLDER=CONFIG_FOLDER)
logHandle=open(LOGFILE, "a")

configF = open(POWERDUCK_CONFIG, "r")
config = json.loads(configF.read())
configF.close()

activeF = open(ACTIVE_PROFILES, "r")
active = json.loads(activeF.read())
activeF.close()

def stripHash(code):
    return code[1:]

def executeLightingProfile(ID):
    try:
        profile = [x for x in config['profiles']['lighting'] if x['id'] == ID][0]
        for data in profile['data']:
            colors = ' '.join(map(stripHash, data['colors']))
            command = 'liquidctl {snippet} color {mode} {colors}'.format(
                    snippet=data['snippet'], mode=data['mode'], colors=colors)
            logHandle.write(command + '\n')
            os.system(command)
        active['lighting']=ID
    except IndexError:
        print("Could not find lighting profile with ID {ID}".format(ID=ID))


def executeCoolingProfile(ID):
    try:
        profile = [x for x in config['profiles']['cooling'] if x['id'] == ID][0]
        print(profile['name'])
        active['cooling']=ID
    except IndexError:
        print("Could not find cooling profile with ID {ID}".format(ID=ID))

def printHelp():
    print("powerduckling [-h] [-d] [-l <id>] [-c <id>]")

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hdc:l:", ["help", "default", "cooling=", "lighting="])
    except getopt.GetoptError:
        printHelp()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            printHelp()
            sys.exit()
        elif opt in ("-d", "--default"):
            try: 
                lightingID = config['general']['defaults']['lighting']
                executeLightingProfile(lightingID)
            except KeyError:
                print("No default lighting profile")
            try:
                coolingID = config['general']['defaults']['cooling']
                executeCoolingProfile(coolingID)
            except KeyError:
                print("No default cooling profile")
        elif opt in ("-l", "--lighting"):
            executeLightingProfile(arg)
        elif opt in ("-c", "--cooling"):
            executeCoolingProfile(arg)


if __name__ == "__main__":
    main(sys.argv[1:])

f = open(ACTIVE_PROFILES, "w")
f.write(json.dumps(active))
f.close()

logHandle.close()
